plugins {
    id 'java-library'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle.userdev' version '7.0.145'
}

version = "0.0.1"
group = "agency.highlysuspect"

String mod_id = "redmill2";

base {
    archivesName = "redmill"
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

sourceSets {
    main {
        //unused
        resources { srcDir 'src/generated/resources' }
    }
    game {
    
    }
}

//write an fml.modFoldersFile (see CommonLaunchHandler)
//Disgusting hack to have 2 sourcesets where one is on SERVICE layer and the other's on GAME.
//This won't work in real life, i'll need to futz with jarinjar or something
File modFoldersFile = new File(project.getProjectDir(), "./runs/modFolders.properties");
println(modFoldersFile);
afterEvaluate {
    var main = project.sourceSets.main;
    var game = project.sourceSets.game;
    
    var res = (SourceSet set) -> { return set.output.resourcesDir.toString().replace('\\',  '/') };
    var cla = (SourceSet set) -> { return set.output.classesDirs.getAsPath().replace('\\',  '/') };
    
    modFoldersFile.text = """redmill=${cla(main)}${File.pathSeparator}${res(main)}
redmill2=${cla(game)}${File.pathSeparator}${res(game)}
""";
}

runs {
    configureEach {
        systemProperty 'forge.logging.markers', 'REGISTRIES'
        systemProperty 'forge.logging.console.level', 'debug'
        systemProperty 'forge.enabledGameTestNamespaces', mod_id
        
        systemProperty "fml.modFoldersFile", modFoldersFile.getAbsolutePath();
        
        modSources(project.sourceSets.main, project.sourceSets.game);
        
//        //im gonna krill myself
//        var main = project.sourceSets.main;
//        var game = project.sourceSets.game;
//
//        var res = (SourceSet set) -> { return set.output.resourcesDir.toString() };
//        var cla = (SourceSet set) -> { return set.output.classesDirs.getAsPath() };
//        systemProperty "MOD_CLASSES", "redmillasdad%%${res(main)};redmill%%${cla(main)};redmill2%%${res(game)};redmill2%%${cla(game)};"
        
        //systemProperty "MOD_CLASSES", "redmill2%%C:\\dev\\mc\\redmill2\\build\\resources\\main;redmill2%%C:\\dev\\mc\\redmill2\\build\\classes\\java\\main;redmill2%%C:\\dev\\mc\\redmill2\\build\\resources\\game;redmill2%%C:\\dev\\mc\\redmill2\\build\\classes\\java\\game"
    }

    client {
    
    }

    server {
        programArgument '--nogui'
    }

    gameTestServer {
    }

    data {
        programArguments.addAll '--mod', mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
    }
}

// Sets up a dependency configuration called 'localRuntime'.
// This configuration should be used instead of 'runtimeOnly' to declare
// a dependency that will be present for runtime testing but that is
// "optional", meaning it will not be pulled by dependents of this mod.
configurations {
    runtimeClasspath.extendsFrom localRuntime
}

dependencies {
    implementation "net.neoforged:neoforge:21.0.167"
    //gameImplementation "net.neoforged:neoforge:21.0.167"
    
    //gameCompileOnly sourceSets.main.compileClasspath //Can't fucking do this. whatever just paste it
    gameCompileOnly "net.neoforged:neoforge:21.0.167"
    gameCompileOnly sourceSets.main.output
}

// This block of code expands all declared replace properties in the specified resource targets.
// A missing property will result in an error. Properties are expanded using ${} Groovy notation.
// When "copyIdeResources" is enabled, this will also run before the game launches in IDE environments.
// See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
tasks.withType(ProcessResources).configureEach {
    filesMatching(['META-INF/neoforge.mods.toml']) {
        expand "version": version;
    }
}

// Example configuration to allow publishing using the maven-publish plugin
publishing {
    publications {
        register('mavenJava', MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/repo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

// IDEA no longer automatically downloads sources/javadoc jars for dependencies, so we need to explicitly enable the behavior.
idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}
