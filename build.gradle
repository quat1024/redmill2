plugins {
    id "java-library"
    id "eclipse"
    id "idea"
    id "maven-publish"
    id "net.neoforged.gradle.userdev" version "7.0.145"
}

version = "0.0.1"
group = "agency.highlysuspect"
String mod_id = "redmill2";

base { archivesName = "redmill" }
java.toolchain.languageVersion = JavaLanguageVersion.of(21)
tasks.withType(JavaCompile).configureEach { options.encoding = "UTF-8" }

sourceSets {
    plugin {}
    game {}
}

//write an fml.modFoldersFile (see CommonLaunchHandler)
//Disgusting hack to have 2 sourcesets where one is on SERVICE layer and the other's on GAME.
//This doesn't do anything in prod but it fixes runClient without needing to like,
//completely split the project into two subprojects (yuck)
File modFoldersFile = new File(project.getProjectDir(), "./runs/modFolders.properties");
println(modFoldersFile);
afterEvaluate {
    var plugin = project.sourceSets.plugin;
    var game = project.sourceSets.game;
    
    var res = (SourceSet set) -> { return set.output.resourcesDir.toString().replace('\\',  '/') };
    var cla = (SourceSet set) -> { return set.output.classesDirs.getAsPath().replace('\\',  '/') };
    
    modFoldersFile.text = """redmill=${cla(plugin)}${File.pathSeparator}${res(plugin)}
redmill2=${cla(game)}${File.pathSeparator}${res(game)}
""";
    println("wrote runs/modFolders.properties :)");
}

runs {
    configureEach {
        systemProperty "forge.logging.markers", "REGISTRIES"
        systemProperty "forge.logging.console.level", "debug"
        systemProperty "forge.enabledGameTestNamespaces", mod_id
        
        systemProperty "fml.modFoldersFile", modFoldersFile.getAbsolutePath();
        
        modSources(project.sourceSets.plugin, project.sourceSets.game);
    }
    client {}
    server { programArgument "--nogui" }
    //todo actually do datagen
    data {
        programArguments.addAll "--mod", mod_id, "--all", "--output", file("src/generated/resources/").getAbsolutePath(), "--existing", file("src/main/resources/").getAbsolutePath()
    }
}

//configurations {
//    runtimeClasspath.extendsFrom localRuntime
//}

dependencies {
    pluginImplementation "net.neoforged:neoforge:21.0.167"
    
    //gameCompileOnly sourceSets.plugin.compileClasspath //Can't fucking do this. whatever just paste it
    gameCompileOnly "net.neoforged:neoforge:21.0.167"
    gameCompileOnly sourceSets.plugin.output
}

//Build redmill-gamelayer.jar which contains everything destined for the GAME layers
tasks.register("gameJar", Jar) {
    group "redmill"
    
    dependsOn tasks.gameClasses
    dependsOn tasks.processGameResources
    
    archiveBaseName = "redmill-gamelayer"
    from sourceSets.game.output
}

//Configure the main jar task to directly include all the PLUGIN/SERVICE layer classes, and JIJ redmill-gamelayer.jar
tasks.jar.configure {
    dependsOn tasks.gameJar
    dependsOn tasks.processGameResources
    dependsOn tasks.processPluginResources
    
    from sourceSets.plugin.output

    into("META-INF/jarjar/") {
        //jij metadata is copied with a ProcessResources below
        from tasks.gameJar.archiveFile
    }
}

tasks.processGameResources.configure {
    filesMatching(["META-INF/neoforge.mods.toml"]) {
        expand "version": version
    }
}

//Also rewrite the jarjar metadata.json file to contain the correct filename of redmill-gamelayer.jar
tasks.processPluginResources.configure {
    filesMatching(["META-INF/neoforge.mods.toml", "META-INF/jarjar/metadata.json"]) {
        expand "version": version,
                "jarjarFilename": tasks.gameJar.archiveFile.get().asFile.getName();
    }
}

publishing {
    publications {
        register("mavenJava", MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/repo"
        }
    }
}

idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}
